# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ar_lazy_preload/all/ar_lazy_preload.rbi
#
# ar_lazy_preload-0.2.6
module ArLazyPreload
  def self.config; end
end
class ArLazyPreload::Configuration
  def auto_preload; end
  def auto_preload=(arg0); end
  def auto_preload?; end
  def initialize; end
end
module ArLazyPreload::Base
  def lazy_preload_context; end
  def lazy_preload_context=(arg0); end
  def self.included(base); end
  def try_preload_lazily(*args, &block); end
end
class ArLazyPreload::AssociationTreeBuilder
  def association_tree; end
  def initialize(association_tree); end
  def subtree_cache; end
  def subtree_for(association); end
end
class ArLazyPreload::AssociatedContextBuilder
  def association_name; end
  def child_association_tree; end
  def initialize(parent_context:, association_name:); end
  def parent_context; end
  def perform; end
  def reflection_cache; end
  def self.prepare(*args); end
end
module ArLazyPreload::Contexts
end
class ArLazyPreload::Contexts::BaseContext
  def association_loaded?(association_name); end
  def association_needs_preload?(_association_name); end
  def initialize(records:); end
  def loaded_association_names; end
  def perform_preloading(association_name); end
  def preloader; end
  def records; end
  def try_preload_lazily(association_name); end
end
class ArLazyPreload::Contexts::AutoPreloadContext < ArLazyPreload::Contexts::BaseContext
  def association_needs_preload?(_association_name); end
end
class ArLazyPreload::Contexts::LazyPreloadContext < ArLazyPreload::Contexts::BaseContext
  def association_needs_preload?(association_name); end
  def association_tree; end
  def initialize(records:, association_tree:); end
end
class ArLazyPreload::Context
  def self.register(records:, association_tree:); end
end
module ArLazyPreload::Relation
  def ar_lazy_preload_records; end
  def lazy_preload!(*args); end
  def lazy_preload(*args); end
  def lazy_preload_values; end
  def lazy_preload_values=(arg0); end
  def load; end
end
module ArLazyPreload::Association
  def load_target; end
end
module ArLazyPreload::Merger
  def merge; end
  def merge_lazy_preloads; end
  def reflect_and_merge_lazy_preloads; end
end
module ArLazyPreload::AssociationRelation
  def initialize(*args); end
  def lazy_preload_context(*args, &block); end
  def owner(*args, &block); end
  def reflection(*args, &block); end
  def setup_preloading_context; end
end
module ArLazyPreload::CollectionProxy
  def ar_lazy_preload_records; end
end
class ArLazyPreload::Railtie < Rails::Railtie
end
